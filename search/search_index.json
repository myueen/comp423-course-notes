{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Yueen Ma's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes. </p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li> <p>Primary author: Yueen Ma</p> </li> <li> <p>Reviewer: Malak</p> </li> </ul>"},{"location":"tutorials/rust-setup/#introduction-heart","title":"Introduction :heart:","text":"<p>Hello! Welcome to the tutorial for creating a new project in dev container for Rust! I am excited to take you on this journey to learn step-by-step how to make your own Rust-specific dev container. </p> <p>Rust is one of the most popular programming language for web development. It is known for building high-performance servers and APIs. Setting up a docker container for Rust would speed you up in onboarding and start coding in Rust! Before diving into the details of setting up the dev container, we make sure you have the prerequiesites satisfied in your local computer. </p>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Sign up at GitHub if you don't have an account already. </p> </li> <li> <p>Install Git. </p> </li> <li> <p>Download and install Visual Studio Code (VS Code). </p> </li> <li> <p>Install Docker</p> </li> <li> <p>Understand Command-line basics. </p> </li> </ul>"},{"location":"tutorials/rust-setup/#setting-up-for-the-project","title":"Setting up for the Project","text":""},{"location":"tutorials/rust-setup/#git-repository-setup","title":"Git Repository Setup","text":"<p>In this section, we will create a local repository for this project and link it to GitHub. </p> <ol> <li> <p>Open your terminal or command prompt, and create a new directory comp423-rust using the following commands: </p> <pre><code>mkdir comp423-rust\ncd comp423-rust\n</code></pre> <p>Create a New Directory</p> <p>This step will create a folder comp423-rust in your home directory. If you want this folder elsewhere, go ahead and change to that parent directory first. </p> </li> <li> <p>Initialize a new Git repository and create a README file: </p> <pre><code>git init\necho \"# Setting up Rust dev container\" &gt; README.md\ngit add README.md\ngit commit -m \"Initialize commit with README\"\n</code></pre> </li> <li> <p>Create remote repository on Github: </p> <ul> <li>In Github, log in and navigate to Create a New Repository page</li> <li>Fill in the following details: <ul> <li>Repository Name: comp423-rust</li> <li>Description: \"Rust dev container for coding in Rust\"</li> <li>Visibility: Public</li> </ul> </li> <li>Leave the rest options as it is and Click Create Repository</li> </ul> </li> <li> <p>Link local repository to Github</p> <ul> <li>Open your terminal or command prompt, and add the GitHub repository as a remote. Note: Change <code>&lt;your-username&gt;</code> with your GitHub username. </li> </ul> <pre><code>git remote add origin https://github.com/&lt;your-username&gt;/comp423-rust.git\n</code></pre> <ul> <li> <p>Use <code>git branch</code> to check default branch name. </p> <ul> <li>If default branch name is not <code>main</code>, use the following conmand to rename: <code>git branch -M main</code></li> </ul> </li> <li> <p>Push your local commits to Github repository:</p> </li> </ul> <pre><code>git push --set-upstream origin main\n</code></pre> <p>Note</p> <p>The --set-upstream flag sets up main branch to track remote branch. It allows you to just write <code>git push origin</code> in future pushes and pull without specifying <code>main</code> branch. </p> <ul> <li>To view your changes, you can refresh GitHub repository or use <code>git log</code> in terminal/command prompt to see the commit. </li> </ul> </li> </ol>"},{"location":"tutorials/rust-setup/#dev-container-setup","title":"Dev Container Setup","text":"<p>In this section, we will create a dev container for Rust! </p> <ol> <li> <p>Add Development Container Configuration</p> <ul> <li>Go to VS Code and open <code>comp423-rust</code> directory. </li> <li>Install the Dev Containers and rust-analyzer extensions for VS Code. </li> <li>Create a <code>.devcontainer</code> directory in the root of your project with the following file inside this \"hidden\" configuration directory: <code>.devcontainer/devcontainer.json</code></li> <li>Add the following content inside <code>devcontainer.json</code>. </li> </ul> <pre><code>{\n\"name\": \"Rust Development Environment\",\n\"image\": \"mcr.microsoft.com/devcontainers/rust:latest\",\n\"customizations\": {\n    \"vscode\": {\n        \"extensions\": [\n            \"rust-lang.rust-analyzer\"\n        ]\n    }\n}\n}\n</code></pre> </li> <li> <p>Reopen the project in a VSCode Dev Container by pressing <code>Ctrl+Shift+P</code> (or <code>Cmd+Shift+P</code> on Mac), typing \"Dev Containers: Reopen in Container,\" and selecting the option. This may takes a few minutes while the image is downloaded and the requirements are installed.</p> </li> </ol>"},{"location":"tutorials/rust-setup/#initialize-a-hello-world-rust-project","title":"Initialize a Hello-World Rust Project","text":"<ol> <li>Inside your <code>comp423-rust</code> folder and within the <code>main</code> branch, check Rust version using this commend: <code>rustc --version</code> in terminal or command prompt. It will display something like: </li> </ol> <pre><code>rustc 1.83.0 (90b35a623 2024-11-26)\n</code></pre> <ol> <li> <p>Run this following commands in your terminal (inside the container). This command creates a new directory and project called hello_comp423. Inside the hello_comp423 folder, you will find a <code>src</code> folder and a file named <code>main.rs</code>. </p> <pre><code>cargo new hello_comp423 --vcs none\ncd hello_comp423\n</code></pre> <p>Note on <code>---vcs</code> none</p> <p>The <code>---vcs</code> flag does not create a new <code>git</code> repository automatically on your behalf. </p> <ul> <li>The Cargo.toml file is called a manifest, and it contains all the metadata that Cargo needs to compile your pacakage. It will contains the following in this example: </li> </ul> <pre><code>[package]\nname = \"hello_comp423\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\n</code></pre> <ul> <li>Inside the <code>src/main.rs</code>, write the following content:</li> </ul> <pre><code>fn main() {\n    println!(\"Hello COMP423\");\n}\n</code></pre> </li> </ol>"},{"location":"tutorials/rust-setup/#building-and-running-a-cargo-project","title":"Building and Running a Cargo Project","text":"<ol> <li> <p>If you are not inside the <code>hello_comp423</code> directory, type in the following command <code>cd hello_comp423</code> to change the directory.</p> </li> <li> <p>From your hello_comp423 directory, build your project by using the following command:  </p> <pre><code>cargo build\n</code></pre> </li> <li> <p>Compile the code and run the executable in this following command:</p> <pre><code>cargo run\n</code></pre> </li> </ol> <p>If all goes well, this command should print out \"Hello COMP423\" in the terminal.</p> <p>Difference between <code>cargo build</code> and <code>cargo run</code></p> <p>The command <code>cargo build</code> creates an executable binary file in your current directory. After that, <code>cargo run</code> compile and run the executable in one command. </p> <p>Congradulation on writing your first Rust program in a dev container! </p>"},{"location":"tutorials/rust-setup/#citations","title":"Citations:","text":"<ol> <li> <p>Jordan, Kris. \"Starting a Static Website Project with MkDocs,\" COMP423 - Spring 2025, https://comp423-25s.github.io/resources/MkDocs/tutorial/#step-2-add-requirementstxt-python-dependency-configuration. </p> </li> <li> <p>Klabnik, Steve and Nichols, Carol, \"The Rust Programming Language,\" https://doc.rust-lang.org/book/.</p> </li> </ol>"}]}